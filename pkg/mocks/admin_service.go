// Code generated by MockGen. DO NOT EDIT.
// Source: micro/service_contract (interfaces: IDomainService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "nginx/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIDomainService is a mock of IDomainService interface.
type MockIDomainService struct {
	ctrl     *gomock.Controller
	recorder *MockIDomainServiceMockRecorder
}

// MockIDomainServiceMockRecorder is the mock recorder for MockIDomainService.
type MockIDomainServiceMockRecorder struct {
	mock *MockIDomainService
}

// NewMockIDomainService creates a new mock instance.
func NewMockIDomainService(ctrl *gomock.Controller) *MockIDomainService {
	mock := &MockIDomainService{ctrl: ctrl}
	mock.recorder = &MockIDomainServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDomainService) EXPECT() *MockIDomainServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIDomainService) Create(arg0 context.Context, arg1 models.DomainAddr) (models.DomainAddr, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(models.DomainAddr)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIDomainServiceMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIDomainService)(nil).Create), arg0, arg1)
}

// CreateZone mocks base method.
func (m *MockIDomainService) CreateZone(arg0 context.Context, arg1 models.CacheZone) (models.CacheZone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateZone", arg0, arg1)
	ret0, _ := ret[0].(models.CacheZone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateZone indicates an expected call of CreateZone.
func (mr *MockIDomainServiceMockRecorder) CreateZone(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateZone", reflect.TypeOf((*MockIDomainService)(nil).CreateZone), arg0, arg1)
}

// Delete mocks base method.
func (m *MockIDomainService) Delete(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIDomainServiceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIDomainService)(nil).Delete), arg0, arg1)
}

// GetAll mocks base method.
func (m *MockIDomainService) GetAll(arg0 context.Context) ([]models.DomainAddr, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].([]models.DomainAddr)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockIDomainServiceMockRecorder) GetAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIDomainService)(nil).GetAll), arg0)
}

// GetAllZone mocks base method.
func (m *MockIDomainService) GetAllZone(arg0 context.Context) ([]models.CacheZone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllZone", arg0)
	ret0, _ := ret[0].([]models.CacheZone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllZone indicates an expected call of GetAllZone.
func (mr *MockIDomainServiceMockRecorder) GetAllZone(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllZone", reflect.TypeOf((*MockIDomainService)(nil).GetAllZone), arg0)
}

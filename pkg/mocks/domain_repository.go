// Code generated by MockGen. DO NOT EDIT.
// Source: nginx/repository_contract (interfaces: IDomainRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "nginx/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIDomainRepository is a mock of IDomainRepository interface.
type MockIDomainRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIDomainRepositoryMockRecorder
}

// MockIDomainRepositoryMockRecorder is the mock recorder for MockIDomainRepository.
type MockIDomainRepositoryMockRecorder struct {
	mock *MockIDomainRepository
}

// NewMockIDomainRepository creates a new mock instance.
func NewMockIDomainRepository(ctrl *gomock.Controller) *MockIDomainRepository {
	mock := &MockIDomainRepository{ctrl: ctrl}
	mock.recorder = &MockIDomainRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDomainRepository) EXPECT() *MockIDomainRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockIDomainRepository) Delete(arg0 context.Context, arg1 int64) (models.DomainAddr, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(models.DomainAddr)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockIDomainRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIDomainRepository)(nil).Delete), arg0, arg1)
}

// GetAll mocks base method.
func (m *MockIDomainRepository) GetAll(arg0 context.Context) ([]models.DomainAddr, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].([]models.DomainAddr)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockIDomainRepositoryMockRecorder) GetAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIDomainRepository)(nil).GetAll), arg0)
}

// GetByName mocks base method.
func (m *MockIDomainRepository) GetByName(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockIDomainRepositoryMockRecorder) GetByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockIDomainRepository)(nil).GetByName), arg0, arg1)
}

// Save mocks base method.
func (m *MockIDomainRepository) Save(arg0 context.Context, arg1 models.DomainAddr) (models.DomainAddr, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0, arg1)
	ret0, _ := ret[0].(models.DomainAddr)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockIDomainRepositoryMockRecorder) Save(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIDomainRepository)(nil).Save), arg0, arg1)
}
